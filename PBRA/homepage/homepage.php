<?php
// Centralize authentication: include auth.php which starts session and redirects
// unauthenticated users to the login page. This avoids repetition and ensures
// uniform behavior across protected pages.
require_once __DIR__ . '/../includes/auth.php';
include __DIR__ . '/../mypbra_connect.php';
error_reporting(E_ALL);
ini_set('display_errors', 1);

$id = $_SESSION['id'];

// Admin check
$is_admin = false;
$stmt = $conn->prepare("SELECT user_type FROM users WHERE id = ?");
$stmt->bind_param("i", $id);
$stmt->execute();
$stmt->bind_result($user_type);
if ($stmt->fetch() && ($user_type === 'admin' || $user_type === 'super_admin')) {
    $is_admin = true;
}
$stmt->close();

// Handle announcement POST
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $title = $_POST['title'] ?? '';
    $content = $_POST['content'] ?? '';
    $imagePath = null;

    // Handle image upload
    if (!empty($_FILES['image']['name'])) {
        $imageTmp = $_FILES['image']['tmp_name'];
        $imageName = basename($_FILES['image']['name']);
        $uploadDir = '../uploads/announcements/';
        if (!is_dir($uploadDir)) {
            mkdir($uploadDir, 0777, true);
        }
        $uniqueName = uniqid() . '_' . $imageName;
        $fullPath = $uploadDir . $uniqueName;
        move_uploaded_file($imageTmp, $fullPath);
        $imagePath = 'uploads/announcements/' . $uniqueName; // âœ… Use this for HTML src
    }

    // Save to database
    if (!empty($title) && !empty($content)) {
        $stmt = $conn->prepare("INSERT INTO announcement (title, content, image_path, created_at) VALUES (?, ?, ?, NOW())");
        $stmt->bind_param("sss", $title, $content, $imagePath);
        $stmt->execute();
        $stmt->close();

        header("Location: " . $_SERVER['PHP_SELF']);
        exit();
    }
}

// Fetch announcements (latest first)
$sql = "SELECT * FROM announcement ORDER BY created_at DESC";
$result = $conn->query($sql);
if (!$result) {
    die("Query failed: " . $conn->error);
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Homepage</title>
    <link rel="stylesheet" href="homepage.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>

<body>
    <?php include __DIR__ . '/../navbar/navbar.php'; ?>

    <div id="content" class="content-body">
        <!-- Add the new two-column layout here -->
        <div class="top-content">
            <!-- Left Column - Calendar -->
            <div class="calendar-section">
                <div class="calendar-widget">
                    <h3>Calendar</h3>
                    <div class="calendar-header">
                        <div class="calendar-controls">
                            <button class="nav-btn" onclick="prevMonth()"><i class="fas fa-chevron-left"></i></button>
                            <span id="currentMonth">August 2025</span>
                            <button class="nav-btn" onclick="nextMonth()"><i class="fas fa-chevron-right"></i></button>
                        </div>
                    </div>
                    <?php if ($is_admin): ?>
                    <button class="new-event-btn">
                        <i class="fas fa-plus"></i> New Event
                    </button>
                    <?php endif; ?>
                    <div class="calendar-grid" id="calendarGrid">
                        <!-- Calendar will be generated by JavaScript -->
                    </div>

                    <!-- Upcoming Events Section -->
                    <div class="upcoming-events">
                        <div class="upcoming-header">
                            <h4><i class="fas fa-calendar-check"></i> Upcoming Events</h4>
                            <div class="slider-controls">
                                <button class="slider-btn prev-btn" disabled><i class="fas fa-chevron-left"></i></button>
                                <button class="slider-btn next-btn"><i class="fas fa-chevron-right"></i></button>
                            </div>
                        </div>
                        <div class="events-slider-container">
                            <div id="events-slider">
                                <p class="no-events-message">No upcoming events.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column - Announcements -->
            <div class="announcement-section">
                <?php include '../includes/announcement.php'; ?>
            </div>
        </div>

        <div class="feature-container">
            <div class="role-container" onclick="window.location.href='../roles/roles.php';">
                <div class="text-role">
                    <h2><strong>ROLE</strong></h2>
                    <p>This section lets you easily keep track of all your roles, including when they start, end, and
                        the latest tasks completed.</p>
                </div>
            </div>

            <div class="pbstaff-container" onclick="window.location.href='../staff/staffsch.php';">
                <div class="text">
                    <h2><strong>PB STAFF</strong></h2>
                    <p>Get to know who is in charge of each department and all of its staff.</p>
                </div>
            </div>
        </div>

        <div class="setting-section">
            <div class="feedback" onclick="window.location.href='../feedback/feedback.php';">
                <i class="fas fa-comment"></i> Feedback
            </div>
            <div class="report" onclick="window.location.href='../report/report.php';">
                <i class="fas fa-clipboard"></i> Report
            </div>
            <div class="user-support" onclick="window.location.href='../usersupport/usersupport.php';">
                <i class="fas fa-question-circle"></i> User Support
            </div>

        </div>

    </div>

    <!-- Event Modal -->
    <div id="eventFormModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <span style="font-size: 24px; font-weight: bold; margin: 0;">Add New Event</span>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="eventForm" novalidate>
                    <div class="form-group">
                        <label for="eventTitle">Event Title</label>
                        <input type="text" id="eventTitle" name="title" required>
                    </div>
                    <div class="form-group">
                        <label for="eventDate">Date</label>
                        <input type="date" id="eventDate" name="date" required>
                    </div>
                    <div class="form-group">
                        <label for="startTime">Start Time</label>
                        <input type="time" id="startTime" name="start_time" required>
                    </div>
                    <div class="form-group">
                        <label for="endTime">End Time</label>
                        <input type="time" id="endTime" name="end_time" required>
                    </div>
                    <div class="form-group">
                        <label for="eventLocation">Location</label>
                        <input type="text" id="eventLocation" name="location" required>
                    </div>
                    <div class="form-group">
                        <label for="eventDescription">Description</label>
                        <textarea id="eventDescription" name="description" rows="4"></textarea>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="submit-btn">Save Event</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Event Modal -->
    <div id="editEventFormModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <span style="font-size: 24px; font-weight: bold; margin: 0;">Edit Event</span>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="editEventForm" novalidate>
                    <input type="hidden" id="editEventId">
                    <div class="form-group">
                        <label for="editEventTitle">Event Title</label>
                        <input type="text" id="editEventTitle" name="title" required>
                    </div>
                    <div class="form-group">
                        <label for="editEventDate">Date</label>
                        <input type="date" id="editEventDate" name="date" required>
                    </div>
                    <div class="form-group">
                        <label for="editStartTime">Start Time</label>
                        <input type="time" id="editStartTime" name="start_time" required>
                    </div>
                    <div class="form-group">
                        <label for="editEndTime">End Time</label>
                        <input type="time" id="editEndTime" name="end_time" required>
                    </div>
                    <div class="form-group">
                        <label for="editEventLocation">Location</label>
                        <input type="text" id="editEventLocation" name="location" required>
                    </div>
                    <div class="form-group">
                        <label for="editEventDescription">Description</label>
                        <textarea id="editEventDescription" name="description" rows="4"></textarea>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="submit-btn">Update Event</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Events Popup -->
    <div id="eventsPopupOverlay" class="events-popup-overlay" style="display: none;">
    </div>
    <div id="eventsPopupContainer" class="events-popup-container" style="display: none;">
        <div class="events-popup-header">
            <h3 id="eventsPopupDate">Events for Today</h3>
            <span class="events-popup-close">&times;</span>
        </div>
        <div class="events-popup-body">
            <div id="eventsContent">
                <div class="no-events">No events scheduled for this day.</div>
            </div>
        </div>
    </div>

    <!-- Replace the existing Delete Confirmation Modal -->
    <div id="deleteEventModal" class="popup-overlay" style="display: none;">
        <div class="popup-content">
            <h3>Are you sure you want to delete this event?</h3>
            <div class="popup-actions">
                <button id="confirmDeleteEventBtn" class="btn-yes">Yes</button>
                <button class="btn-no" onclick="closeDeleteEventModal()">No</button>
            </div>
        </div>
    </div>

    <!-- Replace the existing Success Notification Modal -->
    <div id="successNotificationModal" class="popup-overlay" style="display: none;">
        <div class="popup-content">
            <h3 id="successMessage">Event deleted successfully!</h3>
            <div class="popup-actions">
                <button class="btn-yes" onclick="closeSuccessModal()">OK</button>
            </div>
        </div>
    </div>

    <script>
    // Make PHP user type available in JS
    const CURRENT_USER_TYPE = <?php echo json_encode(
        ($user_type === 'super_admin') ? 'super_admin' :
        (($user_type === 'admin') ? 'admin' : 'regular')
    ); ?>;

    // HOMEPAGE JAVASCRIPT FUNCTIONALITY 
    // Text formatting and modal functions
    function formatText(command) {
        document.execCommand(command, false, null);
    }

    function prepareSubmission() {
        const richContent = document.getElementById('richContent').innerHTML;
        document.getElementById('hiddenContent').value = richContent;
    }

    // Homepage-specific modal functions (renamed to avoid conflicts)
    function openHomepageModal() {
        const modal = document.getElementById('announcementModal');
        if (modal) modal.style.display = 'block';
    }

    function closeHomepageModal() {
        const modal = document.getElementById('announcementModal');
        if (modal) modal.style.display = 'none';
    }

    function previewImage(event) {
        const reader = new FileReader();
        reader.onload = function() {
            const output = document.getElementById('imagePreview');
            output.src = reader.result;
            output.style.display = 'block';
        };
        reader.readAsDataURL(event.target.files[0]);
    }

    // Initialize event listeners when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        const openFormBtn = document.getElementById('openFormBtn');
        if (openFormBtn) {
            openFormBtn.addEventListener('click', openHomepageModal);
        }
    });

    // CALENDAR FUNCTIONALITY 

    // Calendar variables and functions
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    let currentDate = new Date();

    // Enhanced calendar generation with user-type colored dots
    function generateCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        document.getElementById('currentMonth').textContent = `${months[month]} ${year}`;

        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDay = firstDay.getDay();

        // Get saved events to check for highlights
        const savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');

        // Decide one dominant type per day (super_admin > admin > regular)
        const typePriority = { super_admin: 3, admin: 2, regular: 1 };
        const dayTypeMap = {}; // dayNumber -> 'super_admin' | 'admin' | 'regular'

        savedEvents.forEach(ev => {
            const evDate = new Date(ev.date);
            if (evDate.getMonth() !== month || evDate.getFullYear() !== year) return;
            const dayNum = evDate.getDate();
            const t = (ev.userType === 'super_admin' || ev.userType === 'admin') ? ev.userType : 'regular';
            if (!dayTypeMap[dayNum] || typePriority[t] > typePriority[dayTypeMap[dayNum]]) {
                dayTypeMap[dayNum] = t;
            }
        });

        let calendarHTML = `
            <div class="day-header">Sun</div>
            <div class="day-header">Mon</div>
            <div class="day-header">Tue</div>
            <div class="day-header">Wed</div>
            <div class="day-header">Thu</div>
            <div class="day-header">Fri</div>
            <div class="day-header">Sat</div>
        `;

        for (let i = 0; i < startingDay; i++) {
            calendarHTML += '<div class="day-cell empty"></div>';
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const isToday = new Date().toDateString() === new Date(year, month, day).toDateString();
            const typeForDay = dayTypeMap[day]; // undefined | 'super_admin' | 'admin' | 'regular'
            const hasEvent = Boolean(typeForDay);

            // map to CSS class suffix
            const typeClass = typeForDay ? ` has-event-${typeForDay.replace('_', '-')}` : '';

            calendarHTML += `
                <div class="day-cell ${isToday ? 'today' : ''} ${hasEvent ? 'has-event' : ''}${typeClass}"
                     data-date="${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}">${day}</div>
            `;
        }

        document.getElementById('calendarGrid').innerHTML = calendarHTML;

        // Add click event for showing events when clicking on a day
        document.querySelectorAll('.day-cell:not(.empty)').forEach(cell => {
            cell.addEventListener('click', function() {
                document.querySelectorAll('.day-cell').forEach(c => c.classList.remove('highlight'));
                this.classList.add('highlight');

                const dateStr = this.getAttribute('data-date');
                if (dateStr) {
                    // Show events for this date if desired
                    // For now we just highlight and prefill the form date if opened
                }
            });
        });
    }

    function prevMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        generateCalendar();
    }

    function nextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        generateCalendar();
    }

    // EVENT MANAGEMENT FUNCTIONALITY

    // Event form functionality
    function openEventForm() {
        // Use the existing modal from PHP
        const modal = document.getElementById('eventFormModal');
        if (!modal) return;

        // Pre-fill date if a day was clicked
        const selectedDay = document.querySelector('.day-cell.highlight');
        if (selectedDay) {
            const day = selectedDay.textContent;
            const month = currentDate.getMonth() + 1;
            const year = currentDate.getFullYear();
            document.getElementById('eventDate').value = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        } else {
            // Default to today's date
            const today = new Date();
            const day = today.getDate();
            const month = today.getMonth() + 1;
            const year = today.getFullYear();
            document.getElementById('eventDate').value = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        }

        // Show the modal
        modal.style.display = 'block';
        
        // Trigger validation after a short delay to ensure the modal is rendered
        setTimeout(() => {
            if (window.validateEventForm) {
                window.validateEventForm();
            }
        }, 100);
    }

    // EVENT POPUP FUNCTIONALITY 

    // Global function to show events for a specific date
    window.showEventsForDate = function(dateString, displayDate) {
        // Get real events from localStorage
        const savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');

        // Filter events for the selected date
        const eventsForDate = savedEvents.filter(event => event.date === dateString);

        // Update popup title with selected date
        document.getElementById('eventsPopupDate').textContent = `Events for ${displayDate}`;

        // Generate events HTML
        let eventsHTML = '';
        if (eventsForDate.length > 0) {
            eventsHTML = '<ul class="events-list">';
            eventsForDate.forEach(event => {
                // Format times for display
                const startTime = event.startTime.substr(0, 5);
                const endTime = event.endTime.substr(0, 5);

                eventsHTML += `
                    <li class="event-item" data-event-id="${event.id}">
                        <div class="event-time">${startTime} - ${endTime}</div>
                        <div class="event-details">
                            <div class="event-title">${event.title}</div>
                            <div class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location || 'No location'}</div>
                            ${event.description ? `<div class="event-description">${event.description}</div>` : ''}
                        </div>
                        <?php if ($is_admin): ?>
                        <div class="event-actions">
                            <button class="edit-event-btn" onclick="editEvent(${event.id})"><i class="fas fa-edit"></i></button>
                            <button class="delete-event-btn" onclick="deleteEvent(${event.id})"><i class="fas fa-trash-alt"></i></button>
                        </div>
                        <?php endif; ?>
                    </li>
                `;
            });
            eventsHTML += '</ul>';
        } else {
            eventsHTML = '<div class="no-events">No events scheduled for this day.</div>';
        }

        // Update content
        document.getElementById('eventsContent').innerHTML = eventsHTML;

        // Show popup with smooth animation
        const overlay = document.getElementById('eventsPopupOverlay');
        const container = document.getElementById('eventsPopupContainer');

        // Make sure the elements are visible before animation
        overlay.style.display = 'block';
        container.style.display = 'block';

        // Force reflow to ensure transition works
        void overlay.offsetWidth;
        void container.offsetWidth;

        // Add active class to trigger animation
        overlay.classList.add('active');
        container.classList.add('active');
    };

    // Edit event function
    window.editEvent = function(eventId) {
        // Get existing events
        const savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');
        const eventToEdit = savedEvents.find(event => event.id === eventId);

        if (!eventToEdit) return;

        // Close the events popup first
        closeEventsPopup();

        // Use the existing edit modal from PHP
        const modal = document.getElementById('editEventFormModal');
        if (!modal) return;

        // Fill the form with event data
        document.getElementById('editEventId').value = eventToEdit.id;
        document.getElementById('editEventTitle').value = eventToEdit.title;
        document.getElementById('editEventDate').value = eventToEdit.date;
        document.getElementById('editStartTime').value = eventToEdit.startTime;
        document.getElementById('editEndTime').value = eventToEdit.endTime;
        document.getElementById('editEventLocation').value = eventToEdit.location || '';
        document.getElementById('editEventDescription').value = eventToEdit.description || '';

        // Show the edit modal
        modal.style.display = 'block';
        
        // Trigger validation after a short delay to ensure the modal is rendered
        setTimeout(() => {
            if (window.validateEditEventForm) {
                window.validateEditEventForm();
            }
        }, 100);
    };

    // Delete event function
    window.deleteEvent = function(eventId) {
        // Store the event ID for deletion
        window.eventToDelete = eventId;
        
        // Show the delete confirmation modal
        document.getElementById('deleteEventModal').style.display = 'flex';
    };

    // Close events popup function
    window.closeEventsPopup = function() {
        const overlay = document.getElementById('eventsPopupOverlay');
        const container = document.getElementById('eventsPopupContainer');

        // Remove active class to trigger fade-out animation
        overlay.classList.remove('active');
        container.classList.remove('active');

        // Wait for animation to complete before hiding elements
        setTimeout(() => {
            overlay.style.display = 'none';
            container.style.display = 'none';
        }, 300);
    };

    // Delete event modal functions
    window.closeDeleteEventModal = function() {
        document.getElementById("deleteEventModal").style.display = "none";
        window.eventToDelete = null;
    };

    window.closeSuccessModal = function() {
        document.getElementById("successNotificationModal").style.display = "none";
    };

    window.showSuccessModal = function(message) {
        document.getElementById("successMessage").textContent = message;
        document.getElementById("successNotificationModal").style.display = "flex";
        
        // Auto close after 3 seconds
        setTimeout(() => {
            closeSuccessModal();
        }, 3000);
    };

    window.performEventDeletion = function() {
        if (!window.eventToDelete) return;
        
        // Get existing events
        let savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');

        // Remove the event
        const filteredEvents = savedEvents.filter(event => event.id !== window.eventToDelete);

        // Save updated events
        localStorage.setItem('calendarEvents', JSON.stringify(filteredEvents));

        // Close modals
        closeDeleteEventModal();
        closeEventsPopup();

        // Regenerate calendar to update dots
        generateCalendar();

        // Update upcoming events
        displayEvents(filteredEvents);

        // Show success message
        showSuccessModal('Event deleted successfully!');
        
        // Clear the stored event ID
        window.eventToDelete = null;
    };

    // UPCOMING EVENTS SLIDER FUNCTIONALITY

    // Slider variables
    let currentSlide = 0;
    let totalSlides = 0;

    // Display events function with slider
    window.displayEvents = function(events) {
        const eventsSlider = document.getElementById('events-slider');
        if (!eventsSlider) return;

        // Filter to show only upcoming events (today and future)
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const upcomingEvents = events.filter(event => {
            const eventDate = new Date(event.date);
            eventDate.setHours(0, 0, 0, 0);
            return eventDate >= today;
        });

        // Sort by date (closest first)
        upcomingEvents.sort((a, b) => new Date(a.date) - new Date(b.date));

        if (upcomingEvents.length === 0) {
            eventsSlider.innerHTML = '<p class="no-events-message">No upcoming events.</p>';
            const prevBtn = document.querySelector('.prev-btn');
            const nextBtn = document.querySelector('.next-btn');
            if (prevBtn) prevBtn.disabled = true;
            if (nextBtn) nextBtn.disabled = true;
            return;
        }

        let html = '';

        // Create a slide for each event
        upcomingEvents.forEach((event, index) => {
            // Format date
            const eventDate = new Date(event.date);
            const formattedDate = eventDate.toLocaleDateString('en-US', {
                weekday: 'short',
                month: 'short',
                day: 'numeric'
            });

            html += `
                <div class="event-slide" data-index="${index}">
                    <div class="event-item">
                        <div class="event-date">${formattedDate} â€¢ ${event.startTime.substr(0, 5)} - ${event.endTime.substr(0, 5)}</div>
                        <div class="event-title">${event.title}</div>
                        <div class="event-details">
                            ${event.location ? `<div class="event-location"><i class="fas fa-map-marker-alt"></i> ${event.location}</div>` : ''}
                            ${event.description ? `<div class="event-description">${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}</div>` : ''}
                        </div>
                    </div>
                </div>
            `;
        });

        eventsSlider.innerHTML = html;

        // Reset slider position
        currentSlide = 0;
        totalSlides = upcomingEvents.length;

        // Update navigation buttons
        updateSliderButtons();
        updateSliderPosition();
    };

    function updateSliderPosition() {
        const eventsSlider = document.getElementById('events-slider');
        if (eventsSlider) {
            eventsSlider.style.transform = `translateX(-${currentSlide * 100}%)`;
        }
    }

    function updateSliderButtons() {
        const prevBtn = document.querySelector('.prev-btn');
        const nextBtn = document.querySelector('.next-btn');
        
        if (prevBtn) prevBtn.disabled = currentSlide === 0;
        if (nextBtn) nextBtn.disabled = currentSlide === totalSlides - 1 || totalSlides <= 1;
    }

    // DOM CONTENT LOADED EVENT HANDLERS

    // Main initialization function
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize calendar when page loads
        generateCalendar();

        // Set up new event button functionality
        const newEventBtn = document.querySelector('.new-event-btn');
        if (newEventBtn) {
            newEventBtn.addEventListener('click', function() {
                openEventForm();
            });
        }

        // Set up modal close functionality for existing modals
        const eventModal = document.getElementById('eventFormModal');
        const editEventModal = document.getElementById('editEventFormModal');
        
        if (eventModal) {
            const closeBtn = eventModal.querySelector('.close-modal');
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    eventModal.style.display = 'none';
                });
            }
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === eventModal) {
                    eventModal.style.display = 'none';
                }
            });
        }
        
        if (editEventModal) {
            const closeBtn = editEventModal.querySelector('.close-modal');
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    editEventModal.style.display = 'none';
                });
            }
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === editEventModal) {
                    editEventModal.style.display = 'none';
                }
            });
        }

        // Set up events popup close functionality
        const eventsPopupClose = document.querySelector('.events-popup-close');
        const eventsPopupOverlay = document.getElementById('eventsPopupOverlay');
        
        if (eventsPopupClose) {
            eventsPopupClose.addEventListener('click', closeEventsPopup);
        }
        if (eventsPopupOverlay) {
            eventsPopupOverlay.addEventListener('click', closeEventsPopup);
        }

        // Set up delete confirmation modal functionality
        const deleteEventModal = document.getElementById('deleteEventModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteEventBtn');
        const successModal = document.getElementById('successNotificationModal');
        
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', performEventDeletion);
        }
        
        // Close delete modal when clicking outside
        if (deleteEventModal) {
            window.addEventListener('click', function(event) {
                if (event.target === deleteEventModal) {
                    closeDeleteEventModal();
                }
            });
        }
        
        // Close success modal when clicking outside
        if (successModal) {
            window.addEventListener('click', function(event) {
                if (event.target === successModal) {
                    closeSuccessModal();
                }
            });
        }

        // Set up form submission handlers
        const eventForm = document.getElementById('eventForm');
        if (eventForm) {
            // Function to validate and update button state for event form
            function validateEventForm() {
                const eventTitle = document.getElementById('eventTitle').value.trim();
                const eventDate = document.getElementById('eventDate').value;
                const startTime = document.getElementById('startTime').value;
                const endTime = document.getElementById('endTime').value;
                const eventLocation = document.getElementById('eventLocation').value.trim();
                const submitBtn = eventForm.querySelector('.submit-btn');
                
                const isValid = eventTitle && eventDate && startTime && endTime && eventLocation;
                
                if (isValid) {
                    submitBtn.style.backgroundColor = '#007bff'; // Blue for valid
                    submitBtn.style.cursor = 'pointer';
                    submitBtn.disabled = false;
                } else {
                    submitBtn.style.backgroundColor = '#ccc'; // Gray for invalid
                    submitBtn.style.cursor = 'not-allowed';
                    submitBtn.disabled = true;
                }
                
                return isValid;
            }
            
            // Make function globally accessible
            window.validateEventForm = validateEventForm;
            
            // Add event listeners to all required fields
            document.getElementById('eventTitle').addEventListener('input', validateEventForm);
            document.getElementById('eventDate').addEventListener('change', validateEventForm);
            document.getElementById('startTime').addEventListener('change', validateEventForm);
            document.getElementById('endTime').addEventListener('change', validateEventForm);
            document.getElementById('eventLocation').addEventListener('input', validateEventForm);
            
            // Initial validation check
            validateEventForm();
            
            eventForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // Get form values
                const eventTitle = document.getElementById('eventTitle').value.trim();
                const eventDate = document.getElementById('eventDate').value;
                const startTime = document.getElementById('startTime').value;
                const endTime = document.getElementById('endTime').value;
                const eventLocation = document.getElementById('eventLocation').value;
                const eventDescription = document.getElementById('eventDescription').value;

                // Custom validation - check required fields
                if (!validateEventForm()) {
                    // Simply return without doing anything - no modal, no submission
                    return;
                }

                // Create new event object with user type
                const newEvent = {
                    id: Date.now(),
                    title: document.getElementById('eventTitle').value.trim(),
                    date: document.getElementById('eventDate').value,
                    startTime: document.getElementById('startTime').value,
                    endTime: document.getElementById('endTime').value,
                    location: document.getElementById('eventLocation').value,
                    description: document.getElementById('eventDescription').value,
                    userType: CURRENT_USER_TYPE // super_admin | admin | regular
                };

                // Get existing events from localStorage
                let savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');

                // Add new event to the list
                savedEvents.push(newEvent);

                // Sort events by date
                savedEvents.sort((a, b) => new Date(a.date) - new Date(b.date));

                // Save back to localStorage
                localStorage.setItem('calendarEvents', JSON.stringify(savedEvents));

                // Close the modal
                document.getElementById('eventFormModal').style.display = 'none';

                // Clear form
                eventForm.reset();

                // Regenerate calendar to update event dots
                generateCalendar();

                // Update the upcoming events display
                displayEvents(savedEvents);

                // Show success message
                showSuccessModal('Event created successfully!');
            });
        }

        const editEventForm = document.getElementById('editEventForm');
        if (editEventForm) {
            // Function to validate and update button state for edit form
            function validateEditEventForm() {
                const title = document.getElementById('editEventTitle').value.trim();
                const date = document.getElementById('editEventDate').value;
                const startTime = document.getElementById('editStartTime').value;
                const endTime = document.getElementById('editEndTime').value;
                const location = document.getElementById('editEventLocation').value.trim();
                const submitBtn = editEventForm.querySelector('.submit-btn');
                
                const isValid = title && date && startTime && endTime && location;
                
                if (isValid) {
                    submitBtn.style.backgroundColor = '#007bff'; // Blue for valid
                    submitBtn.style.cursor = 'pointer';
                    submitBtn.disabled = false;
                } else {
                    submitBtn.style.backgroundColor = '#ccc'; // Gray for invalid
                    submitBtn.style.cursor = 'not-allowed';
                    submitBtn.disabled = true;
                }
                
                return isValid;
            }
            
            // Make function globally accessible
            window.validateEditEventForm = validateEditEventForm;
            
            // Add event listeners to all required fields
            document.getElementById('editEventTitle').addEventListener('input', validateEditEventForm);
            document.getElementById('editEventDate').addEventListener('change', validateEditEventForm);
            document.getElementById('editStartTime').addEventListener('change', validateEditEventForm);
            document.getElementById('editEndTime').addEventListener('change', validateEditEventForm);
            document.getElementById('editEventLocation').addEventListener('input', validateEditEventForm);
            
            editEventForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const eventId = parseInt(document.getElementById('editEventId').value);
                const title = document.getElementById('editEventTitle').value.trim();
                const date = document.getElementById('editEventDate').value;
                const startTime = document.getElementById('editStartTime').value;
                const endTime = document.getElementById('editEndTime').value;
                const location = document.getElementById('editEventLocation').value;
                const description = document.getElementById('editEventDescription').value;

                let savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');

                const updatedEvents = savedEvents.map(ev => {
                    if (ev.id === eventId) {
                        // preserve existing userType; default to current user if missing
                        const preservedType = ev.userType || CURRENT_USER_TYPE;
                        return { ...ev, title, date, startTime, endTime, location, description, userType: preservedType };
                    }
                    return ev;
                });

                localStorage.setItem('calendarEvents', JSON.stringify(updatedEvents));
                document.getElementById('editEventFormModal').style.display = 'none';
                closeEventsPopup();
                generateCalendar();
                displayEvents(updatedEvents);
                showSuccessModal('Event updated successfully!');
            });
        }

        // Set up slider navigation
        document.addEventListener('click', function(e) {
            if (e.target.closest('.prev-btn')) {
                if (currentSlide > 0) {
                    currentSlide--;
                    updateSliderPosition();
                    updateSliderButtons();
                }
            } else if (e.target.closest('.next-btn')) {
                if (currentSlide < totalSlides - 1) {
                    currentSlide++;
                    updateSliderPosition();
                    updateSliderButtons();
                }
            }
        });

        // Add event listener for clicks on day cells
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('day-cell') && !e.target.classList.contains('empty')) {
                // Remove highlight from all cells
                document.querySelectorAll('.day-cell').forEach(cell => {
                    cell.classList.remove('highlight');
                });

                // Add highlight to clicked cell
                e.target.classList.add('highlight');

                // Get the date of the clicked day
                const day = e.target.textContent;
                const month = currentDate.getMonth() + 1;
                const year = currentDate.getFullYear();
                const formattedDate = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;

                // Only show events popup if this day has an event (has the has-event class)
                if (e.target.classList.contains('has-event')) {
                    showEventsForDate(formattedDate, `${months[month - 1]} ${day}, ${year}`);
                }
            }
        });

        // Get existing events from localStorage and display them
        let savedEvents = JSON.parse(localStorage.getItem('calendarEvents') || '[]');
        displayEvents(savedEvents);
    });
    </script>
    
    <!-- Include scroll to top button component -->
    <?php include '../scrolltop/scrolltop.php'; ?>
    
    <!-- CSS and notification debugging (remove in production) -->
    <script src="css_load_debug.js"></script>
    <script src="notification_debug.js"></script>
    <script src="css_debug.js"></script>
    
    <script src="../scrolltop/scrolltop.js" defer></script>
    <?php include '../footer/footer.php'; ?>
</body>

</html>
